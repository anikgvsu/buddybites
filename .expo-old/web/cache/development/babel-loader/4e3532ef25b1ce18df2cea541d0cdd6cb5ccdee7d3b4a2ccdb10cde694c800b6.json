{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toArray from \"@babel/runtime/helpers/toArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from \"react\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport RenderHtml from 'react-native-render-html';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar getNodes = function getNodes(str) {\n  return new DOMParser().parseFromString(str, \"text/html\").body.childNodes;\n};\nvar parseHTML = function parseHTML(str) {\n  var nodes = str.split(/<|>/).map(function (node) {\n    var _node$split = node.split(' '),\n      _node$split2 = _toArray(_node$split),\n      tag = _node$split2[0],\n      attributes = _node$split2.slice(1);\n    if (tag.startsWith('/')) {\n      return {\n        type: 'closing',\n        tag: tag.slice(1)\n      };\n    }\n    var _tag$split = tag.split(/\\s|\\/|\\>|$/),\n      _tag$split2 = _toArray(_tag$split),\n      elementName = _tag$split2[0],\n      rest = _tag$split2.slice(1);\n    var attributesMap = {};\n    attributes.forEach(function (attribute) {\n      var _attribute$split = attribute.split('='),\n        _attribute$split2 = _slicedToArray(_attribute$split, 2),\n        name = _attribute$split2[0],\n        value = _attribute$split2[1];\n      if (name && value) {\n        attributesMap[name] = value.replace(/['\"]/g, '');\n      }\n    });\n    return {\n      type: 'element',\n      tag: elementName,\n      attributes: attributesMap,\n      children: [],\n      content: rest.join(' ')\n    };\n  });\n  var stack = [];\n  var root = {\n    children: []\n  };\n  nodes.forEach(function (node) {\n    if (node.type === 'element') {\n      if (stack.length > 0) {\n        var parent = stack[stack.length - 1];\n        parent.children.push(node);\n      } else {\n        root.children.push(node);\n      }\n      stack.push(node);\n    } else if (node.type === 'closing') {\n      stack.pop();\n    }\n  });\n  return root.children;\n};\nvar createJSX = function createJSX(nodes) {\n  return nodes.map(function (node, index) {\n    if (node.type === 'element') {\n      var children = createJSX(node.children);\n      return React.createElement(node.tag, _objectSpread(_objectSpread({}, node.attributes), {}, {\n        key: index\n      }), children);\n    } else {\n      return node.content;\n    }\n  });\n};\nexport var StringToJSX = function StringToJSX(props) {\n  var parsedNodes = parseHTML(props.domString);\n  var jsxElements = createJSX(parsedNodes);\n  return _jsx(_Fragment, {\n    children: jsxElements\n  });\n};","map":{"version":3,"names":["React","useWindowDimensions","RenderHtml","Fragment","_Fragment","jsx","_jsx","getNodes","str","DOMParser","parseFromString","body","childNodes","parseHTML","nodes","split","map","node","_node$split","_node$split2","_toArray","tag","attributes","slice","startsWith","type","_tag$split","_tag$split2","elementName","rest","attributesMap","forEach","attribute","_attribute$split","_attribute$split2","_slicedToArray","name","value","replace","children","content","join","stack","root","length","parent","push","pop","createJSX","index","createElement","_objectSpread","key","StringToJSX","props","parsedNodes","domString","jsxElements"],"sources":["/Users/shafiqulanik/GVSU/S23/CIS 657 - Mobile Application Development/Project/buddybites/helpers/String2JSX.js"],"sourcesContent":["import React from \"react\";\nimport { useWindowDimensions } from 'react-native';\nimport RenderHtml from 'react-native-render-html';\n\nlet getNodes = str =>\n  new DOMParser().parseFromString(str, \"text/html\").body.childNodes;\n/* let createJSX = nodeArray => {\n  return nodeArray.map(node => {\n    let attributeObj = {};\n    const {\n      attributes,\n      localName,\n      childNodes,\n      nodeValue\n    } = node;\n    if (attributes) {\n      Array.from(attributes).forEach(attribute => {\n        if (attribute.name === \"style\") {\n          let styleAttributes = attribute.nodeValue.split(\";\");\n          let styleObj = {};\n          styleAttributes.forEach(attribute => {\n            let [key, value] = attribute.split(\":\");\n            styleObj[key] = value;\n          });\n          attributeObj[attribute.name] = styleObj;\n        } else {\n          attributeObj[attribute.name] = attribute.nodeValue;\n        }\n      });\n    }\n    return localName ?\n      React.createElement(\n        localName,\n        attributeObj,\n        childNodes && Array.isArray(Array.from(childNodes)) ?\n        createJSX(Array.from(childNodes)) :\n        []\n      ) :\n      nodeValue;\n  });\n}; */\n\nconst parseHTML = (str) => {\n  const nodes = str.split(/<|>/).map((node) => {\n    const [tag, ...attributes] = node.split(' ');\n\n    if (tag.startsWith('/')) {\n      return {\n        type: 'closing',\n        tag: tag.slice(1),\n      };\n    }\n\n    const [elementName, ...rest] = tag.split(/\\s|\\/|\\>|$/);\n    const attributesMap = {};\n\n    attributes.forEach((attribute) => {\n      const [name, value] = attribute.split('=');\n      if (name && value) {\n        attributesMap[name] = value.replace(/['\"]/g, '');\n      }\n    });\n\n    return {\n      type: 'element',\n      tag: elementName,\n      attributes: attributesMap,\n      children: [],\n      content: rest.join(' '),\n    };\n  });\n\n  const stack = [];\n  const root = { children: [] };\n\n  nodes.forEach((node) => {\n    if (node.type === 'element') {\n      if (stack.length > 0) {\n        const parent = stack[stack.length - 1];\n        parent.children.push(node);\n      } else {\n        root.children.push(node);\n      }\n      stack.push(node);\n    } else if (node.type === 'closing') {\n      stack.pop();\n    }\n  });\n\n  return root.children;\n};\n\nconst createJSX = (nodes) => {\n  return nodes.map((node, index) => {\n    if (node.type === 'element') {\n      const children = createJSX(node.children);\n\n      return React.createElement(\n        node.tag,\n        { ...node.attributes, key: index },\n        children\n      );\n    } else {\n      return node.content;\n    }\n  });\n};\n\nexport const StringToJSX = props => {\n  const parsedNodes = parseHTML(props.domString);\n  const jsxElements = createJSX(parsedNodes);\n\n  return <>{jsxElements}</>;\n  //return createJSX(Array.from(getNodes(props.domString)));\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}